{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"6MA2CeA,EAxCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAqBvC,OACI,0BAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAGCJ,EAAWK,OAAOC,QAAU,IAC3BR,GAAe,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACzCN,EAAc,OAOd,gEACA,2BACIO,KAAK,OACLC,MAAOT,EAEPU,SAxBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,uBCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAVxB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAOV,EAAQ,EAARA,IAEhC,OACI,yBAAKc,UAAU,4DACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,+BAAKA,EAAL,OCDCO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECHd,SAAEA,GAAgB,IAAD,EAEdd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAoBzC,OAbAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IAGEqB,EDd0BK,CAAc1B,GAAlCa,EAHyB,EAG9BN,KAAaa,EAHiB,EAGjBA,QAGrB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,iBAEZ,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IAEJD,UEmBlBkB,EArCM,WAAI,MAKe1C,mBAAS,CAAC,gBALzB,mBAKd2C,EALc,KAKF5C,EALE,KAcrB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAS,OACjB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,UAAWA,UC1BvC8B,IAASC,OAAQ,kBAAC,EAAD,MAAmBC,SAASC,eAAe,U","file":"static/js/main.d44f0054.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( {setCategorias} ) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        // agregamos el nuevo valor tomado del cambio del input\n        setInputValue( e.target.value )\n    }\n\n    const handleSubmit = (e) => {\n        //evitar la recarga de la página con el submit del form\n        e.preventDefault();\n        \n        // validamos que tenga 2 letras o más\n        if(inputValue.trim().length >= 2){\n            setCategorias( (cat) => ([inputValue, ...cat]) );\n            setInputValue('')\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <p> Ingresa una nueva categoria: &nbsp;\n            <input \n                type=\"text\"\n                value={inputValue}\n                // llamamamos al handle con cada cambio del input\n                onChange={ handleInputChange }\n            />\n            </p>\n        </form>\n    )\n        \n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\nexport const getGifs = async( categoria ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( categoria ) }&limit=10&api_key=p2d2gyT3y8w68Oo9knIe8UPdPfIEvl0p`\n\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id : img.id,\n            title: img.title,\n            url : img.images?.downsized_medium.url\n        }\n    })\n\n    // console.log(gifs);\n    return gifs;\n} ","import React from 'react';\n\nexport const GifGridItem = ({title, url})=> {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n            <img src={url} alt={title} ></img>\n            <p> {title} </p>\n        </div>\n    );\n\n}","// import React, { useEffect, useState } from 'react';\nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ({ categoria }) => {\n\n    // const [images, setImages] = useState([]);\n    const { data:images, loading } = useFetchGifs( categoria );\n\n\n    return(\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{categoria}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Cargando ... </p>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            // spred de las props\n                            { ...img } />\n                    ))\n                }\n            </div>\n        </>\n    );\n\n} ","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( categoria ) => {\n\n    const [state, setState ] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> {\n        getGifs( categoria )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n\n    }, [ categoria ] );\n    \n\n    return state; \n}","\nimport React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n//Para definir un componete funcional lo hacemos con la función flecha\nconst GifExpertApp = ()=>{\n\n    //no se recomienda agregar el listado como constante si este puede cambiar en el tiempo, es mejor un State\n    //const categorias = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categorias, setCategorias] = useState(['Dragon Ball']);\n\n    // const handleAdd = () => {\n    //     //para trabajar con arreglos en el estado, no se usa .push()\n    //     //se debe usar el operador Spred sobre el arreglo [...arr] para mantener lo que estaba registrado antes\n    //     setCategorias( (cat) => ([...cat,'Teen Titans']) );\n    // }\n\n    //y debe tener un return de JSX, debemos importar React para esto\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategorias={ setCategorias } />\n            <hr />\n\n            <ol>\n                { \n                    categorias.map( categoria => \n                            <GifGrid \n                            key={categoria}\n                            categoria={categoria} />\n                     )\n                \n                \n                }\n            </ol>\n\n        </>\n    )\n\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render( <GifExpertApp />,  document.getElementById('root') );\n\n"],"sourceRoot":""}